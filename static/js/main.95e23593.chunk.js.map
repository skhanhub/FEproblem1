{"version":3,"sources":["store/types.js","components/NavBar/NavBar.js","pages/NoMatch.js","utilities/API/API.js","components/Planet/CustomToggle.js","components/Planet/CustomMenu.js","components/Planet/Planet.js","store/actions/index.js","config.js","store/results/index.js","components/GameForm/GameForm.js","pages/Game.js","pages/Result.js","components/Footer/Footer.js","App.js","reportWebVitals.js","store/reducers/getData.js","store/reducers/formControl.js","store/reducers/index.js","index.js"],"names":["GET_PLANETS","GET_VEHICLES","FIND_PLANET","LOADING","ERROR","VALID_PLANET_OPTIONS","SELECTED_PLANETS","SELECTED_VEHICLES","CLEAR","NavBar","history","useHistory","dispatch","useDispatch","Navbar","bg","variant","style","marginBottom","Brand","data-testid","onClick","event","push","Button","className","type","float","NoMatch","Card","Body","role","aria-label","getPlanets","a","axios","get","result","data","getVehicles","findPlanet","planetNames","vehicleNames","planets","planetIndex","Math","floor","random","length","hiddenPlanet","name","gameResult","planet_name","includes","status","CustomToggle","React","forwardRef","ref","children","value","Form","Group","Label","as","display","minWidth","e","preventDefault","CustomMenu","labeledBy","useState","setValue","aria-labelledby","FormControl","autoFocus","placeholder","onChange","target","Children","toArray","filter","child","props","toLowerCase","startsWith","Planet","planetId","planetOptions","useSelector","state","selectedPlanet","formControl","selectedPlanets","filteredPlanetOptions","validPlanetOptions","planet","Object","values","getData","vehicles","minHeight","Dropdown","onSelect","payload","Toggle","Menu","map","Item","eventKey","active","hidden","vehicle","getState","previousVehicle","selectedVehicles","remaining","upddateVehicles","keys","disabled","maxDistance","marginRight","id","htmlFor","total","getTotalTime","totalTime","forEach","speed","getSelected","GameForm","i","selected","timeTaken","cols","Col","md","numberOfColsInRow","Row","margin","Header","textAlign","API","message","Game","loading","useEffect","formattedData","distance","total_no","max_distance","Spinner","animation","Result","Title","Text","Footer","App","error","color","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","combineReducer","combineReducers","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","reduxThunk","logger","document","getElementById"],"mappings":"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","file":"static/js/main.95e23593.chunk.js","sourcesContent":["export const GET_PLANETS = \"GET_PLANETS\";\r\nexport const GET_VEHICLES = \"GET_VEHICLES\";\r\nexport const FIND_PLANET = \"FIND_PLANET\";\r\nexport const LOADING = \"LOADING\";\r\nexport const ERROR = \"ERROR\";\r\n\r\nexport const VALID_PLANET_OPTIONS = \"VALID_PLANET_OPTIONS\";\r\nexport const SELECTED_PLANETS = \"SELECTED_PLANETS\";\r\nexport const SELECTED_VEHICLES = \"SELECTED_VEHICLES\";\r\nexport const CLEAR = \"CLEAR\";\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Navbar, Button } from 'react-bootstrap';\r\nimport { useDispatch } from \"react-redux\"\r\nimport { CLEAR } from \"../../store/types\";\r\n\r\nexport default function NavBar() {\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  return (\r\n\r\n    <Navbar bg=\"dark\" variant=\"dark\" style={{marginBottom: \"2rem\"}}>\r\n      <Navbar.Brand \r\n        data-testid=\"navBarBrand\"\r\n        onClick={event=>history.push(\"/\")}\r\n      >\r\n        Finding Falcone!\r\n      </Navbar.Brand>\r\n      <Button \r\n        data-testid=\"resetButton\"\r\n        className=\"ml-auto\"\r\n        onClick={event=>{\r\n          dispatch({type: CLEAR});\r\n        }}\r\n        style={{float: \"centre\"}}\r\n        variant=\"outline-info\"\r\n      >\r\n        Reset\r\n      </Button>\r\n    </Navbar>\r\n  );\r\n}","import React from \"react\";\r\nimport { Card } from 'react-bootstrap';\r\n\r\nfunction NoMatch() {\r\n\r\n  return (\r\n    <Card className=\"text-center\">\r\n      <Card.Body>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default NoMatch;\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n  getPlanets: async function(){\r\n    const result = await axios.get(\"https://5f5ff7f790cf8d00165573ed.mockapi.io/planets\");\r\n    return result.data;\r\n  },\r\n  getVehicles: async function(){\r\n    const result = await axios.get(\"https://5f5ff7f790cf8d00165573ed.mockapi.io/vehicles\");\r\n    return result.data;\r\n  },\r\n  findPlanet: async function(planetNames, vehicleNames){\r\n    let result = await axios.get(\"https://5f5ff7f790cf8d00165573ed.mockapi.io/planets\");\r\n    const planets = result.data;\r\n    const planetIndex = Math.floor(Math.random() * planets.length);\r\n    const hiddenPlanet = planets[planetIndex].name;\r\n\r\n    const gameResult = {planet_name: hiddenPlanet}\r\n    if(planetNames.includes(hiddenPlanet)) gameResult.status = \"success\";\r\n    else gameResult.status = \"false\";\r\n\r\n    return gameResult;\r\n  },\r\n}","import React from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\n\r\n// The forwardRef is important!!\r\n// Dropdown needs access to the DOM node in order to position the Menu\r\nconst CustomToggle = React.forwardRef(({ children, onClick, value }, ref) => (\r\n  <Form.Group>\r\n    <Form.Label as=\"h5\" style={{display: \"block\"}}>{children}</Form.Label>\r\n    <Button\r\n      style={{minWidth: \"8rem\"}}\r\n      ref={ref}\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        onClick(e);\r\n      }}\r\n    >\r\n      {value?value:\"Select\"} &#x25bc;\r\n    </Button>\r\n  </Form.Group>\r\n));\r\n\r\nexport default CustomToggle;","import React, {useState, forwardRef, Children} from 'react';\r\nimport { FormControl } from 'react-bootstrap';\r\n\r\n// forwardRef again here!\r\n// Dropdown needs access to the DOM of the Menu to measure it\r\nconst CustomMenu = forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={style}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <FormControl\r\n          autoFocus\r\n          className=\"mx-3 my-2 w-auto\"\r\n          placeholder=\"Type to filter...\"\r\n          onChange={(e) => setValue(e.target.value)}\r\n          value={value}\r\n        />\r\n        <ul className=\"list-unstyled\">\r\n          {Children.toArray(children).filter(\r\n            (child) =>\r\n              !value || child.props.children.toLowerCase().startsWith(value),\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default CustomMenu;","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Card, Dropdown } from 'react-bootstrap';\r\nimport {SELECTED_PLANETS} from \"../../store/types\";\r\nimport {upddateVehicles} from \"../../store/actions\";\r\nimport CustomToggle from \"./CustomToggle\";\r\nimport CustomMenu from \"./CustomMenu\";\r\n\r\nexport default function Planet({planetId}) {\r\n\r\n  const getPlanetOptions = state => {\r\n    const selectedPlanet = state.formControl.selectedPlanets[planetId];\r\n    const selectedPlanets = state.formControl.selectedPlanets;\r\n    const validPlanetOptions = state.formControl.validPlanetOptions;\r\n\r\n    const filteredPlanetOptions = validPlanetOptions.filter(planet=>!Object.values(selectedPlanets).includes(planet));\r\n    return selectedPlanet ? [...filteredPlanetOptions, selectedPlanet] : filteredPlanetOptions\r\n    \r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const planetOptions = useSelector(getPlanetOptions);\r\n  const selectedPlanet = useSelector(state => state.formControl.selectedPlanets[planetId]);\r\n  const planets = useSelector(state => state.getData.planets);\r\n  const vehicles = useSelector(state => state.getData.vehicles);\r\n\r\n  return (\r\n    <Card style={{minHeight: \"16rem\"}}>\r\n      <Card.Body>\r\n      <Dropdown style={{marginBottom: \"1rem\"}}  onSelect={value=>dispatch({ type: SELECTED_PLANETS, payload: {[planetId]: value}  })}>\r\n        <Dropdown.Toggle \r\n          value={selectedPlanet}\r\n          as={CustomToggle} \r\n        >\r\n          Destination {planetId}\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu \r\n          as={CustomMenu}\r\n        >\r\n          {planetOptions && planetOptions.map((planet)=>\r\n            <Dropdown.Item \r\n              key={planet} \r\n              eventKey={planet}\r\n              active={planet===selectedPlanet}\r\n            >\r\n              {planet}\r\n            </Dropdown.Item>\r\n          )}\r\n        \r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n\r\n      <div hidden={!selectedPlanet} onChange={event=>dispatch(upddateVehicles(planetId, event.target.value))}>\r\n        {\r\n          Object.keys(vehicles).map(vehicle=>{\r\n            return(  \r\n              <div key={vehicle}>\r\n                <input \r\n                  disabled={vehicles[vehicle].remaining===0 || vehicles[vehicle].maxDistance<planets[selectedPlanet]} \r\n                  style={{marginRight: \"1rem\"}} \r\n                  type=\"radio\" \r\n                  id={`${vehicle}${planetId}`} \r\n                  name={`vehicle${planetId}`} \r\n                  value={vehicle}\r\n                />\r\n                <label \r\n                  htmlFor={`${vehicle}${planetId}`}\r\n                >\r\n                  {vehicle} ({vehicles[vehicle].remaining}/{vehicles[vehicle].total})\r\n                </label>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      \r\n      </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}","import API from \"../../utilities/API/API\";\r\nimport { LOADING, ERROR, GET_PLANETS, GET_VEHICLES, FIND_PLANET, SELECTED_VEHICLES } from \"../types\";\r\n\r\nexport const getPlanets = () => async (dispatch) => {\r\n\r\n  try {\r\n    dispatch({ type: LOADING, payload: true })\r\n \r\n    const data = await API.getPlanets();\r\n    const formattedData = {};\r\n    \r\n    data.forEach(planet=>formattedData[planet.name]=planet.distance)\r\n    dispatch({ type: GET_PLANETS, payload: formattedData })\r\n\r\n    dispatch({ type: ERROR, payload: null })\r\n    dispatch({ type: LOADING, payload: false })\r\n  } catch (e) {\r\n    dispatch({ type: ERROR, payload: e.message })\r\n    dispatch({ type: LOADING, payload: false })\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const getVehicles = () => async (dispatch) => {\r\n\r\n  try {\r\n    dispatch({ type: LOADING, payload: true })\r\n    const data = await API.getVehicles();\r\n    const formattedData = {};\r\n    \r\n    data.forEach(vehicle=>(\r\n      formattedData[vehicle.name] = {\r\n        total: vehicle.total_no,\r\n        remaining: vehicle.total_no,\r\n        maxDistance: vehicle.max_distance,\r\n        speed: vehicle.speed,\r\n      }\r\n    ));\r\n\r\n    dispatch({ type: ERROR, payload: null })\r\n    dispatch({ type: GET_VEHICLES, payload: formattedData })\r\n    dispatch({ type: LOADING, payload: false })\r\n  } catch (e) {\r\n    dispatch({ type: ERROR, payload: e.message })\r\n    dispatch({ type: LOADING, payload: false })\r\n  }\r\n}\r\n\r\nexport const findPlanet = () => async (dispatch, getState) => {\r\n\r\n  try {\r\n    dispatch({ type: LOADING, payload: true })\r\n    const selectedPlanets = Object.values(getState().formControl.selectedPlanets);\r\n    const selectedVehicles = Object.values(getState().formControl.selectedVehicles);\r\n    const data = await API.findPlanet(selectedPlanets, selectedVehicles);\r\n\r\n    dispatch({ type: ERROR, payload: null })\r\n    dispatch({ type: FIND_PLANET, payload: data })\r\n    dispatch({ type: LOADING, payload: false })\r\n  } catch (e) {\r\n    dispatch({ type: ERROR, payload: e.message })\r\n    dispatch({ type: LOADING, payload: false })\r\n  }\r\n}\r\n\r\n\r\nexport const upddateVehicles = (planetId, vehicle) => (dispatch, getState) => {\r\n  \r\n \r\n  const vehicles = getState().getData.vehicles;\r\n  const previousVehicle = getState().formControl.selectedVehicles[planetId];\r\n\r\n\r\n  if(previousVehicle){\r\n    vehicles[previousVehicle].remaining = vehicles[previousVehicle].remaining + 1;\r\n  }\r\n  vehicles[vehicle].remaining = vehicles[vehicle].remaining - 1;\r\n\r\n  dispatch({ type: SELECTED_VEHICLES, payload: {[planetId]: vehicle} })\r\n\r\n  dispatch({ type: GET_VEHICLES, payload: vehicles })\r\n\r\n}","export const planetsToBeSelected = 4;\r\nexport const colsPerRow = 4;\r\nexport const numberOfColsInRow = 12;","import {planetsToBeSelected} from \"../../config\";\r\n\r\nexport const getTotalTime = state => {\r\n  const planets = state.getData.planets;\r\n  const vehicles = state.getData.vehicles;\r\n  const selectedPlanets = state.formControl.selectedPlanets;\r\n  const selectedVehicles = state.formControl.selectedVehicles;\r\n\r\n  let totalTime = 0;\r\n  Object.keys(selectedVehicles).forEach(id=>{\r\n    const vehicle = selectedVehicles[id]\r\n    const planet = selectedPlanets[id]\r\n\r\n    totalTime = totalTime + planets[planet] / vehicles[vehicle].speed;\r\n  })\r\n\r\n  return totalTime\r\n  \r\n}\r\n\r\nexport const getSelected = state => {\r\n  const selectedPlanets = state.formControl.selectedPlanets;\r\n  const selectedVehicles = state.formControl.selectedVehicles;\r\n\r\n  return (Object.values(selectedPlanets).length === planetsToBeSelected && Object.values(selectedVehicles).length === planetsToBeSelected); \r\n}","\r\nimport React from 'react';\r\nimport { Button, Row, Col, Card } from 'react-bootstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport Planet from \"../Planet/Planet\";\r\nimport {findPlanet} from \"../../store/actions\";\r\nimport {getSelected, getTotalTime} from \"../../store/results\";\r\nimport {planetsToBeSelected, colsPerRow, numberOfColsInRow} from \"../../config\";\r\n\r\n\r\n\r\n\r\nfunction GameForm() {\r\n\r\n  const dispatch = useDispatch();\r\n  const selected = useSelector(getSelected);\r\n  const timeTaken = useSelector(getTotalTime);\r\n  const history = useHistory();\r\n\r\n  const result = [];\r\n  let cols = [];\r\n  let i;\r\n  for(i = 0; i < planetsToBeSelected; i++){\r\n\r\n    cols.push(\r\n      <Col key={`col${i}`} md={numberOfColsInRow/colsPerRow}>\r\n        <Planet planetId={i}/>\r\n      </Col>\r\n    );\r\n    \r\n    if((i+1)%colsPerRow === 0 && i !== 0){\r\n      result.push(\r\n        <Row key={`row${i}`}>\r\n          {cols}\r\n        </Row>\r\n      )\r\n      cols = [];\r\n    }\r\n  }\r\n\r\n  if(planetsToBeSelected%colsPerRow !== 0){\r\n    result.push(\r\n      <Row key={`row${i}`}>\r\n        {cols}\r\n      </Row>\r\n    )\r\n  }\r\n  return(\r\n    <>\r\n    <Card style={{margin: \"1rem 2rem\"}}>\r\n      <Card.Header as=\"h5\">Select planets you want to search in</Card.Header>\r\n      <Card.Body>\r\n        {result}\r\n      </Card.Body> \r\n    </Card>\r\n    <Card style={{margin: \"2rem 2rem\"}}>\r\n      <Row>\r\n        <Col style={{textAlign: \"center\"}}>\r\n          <Button \r\n            style={{margin: \"0.1rem\"}}\r\n            disabled={!selected} \r\n            onClick={event=>{\r\n              dispatch(findPlanet())\r\n              history.push(`/Result`)\r\n            }} \r\n            variant=\"primary\"\r\n          >\r\n            Find Falcone!\r\n          </Button>\r\n        </Col>\r\n        <Col>\r\n          <h3 style={{textAlign: \"center\"}}>\r\n            Time taken: {timeTaken}\r\n          </h3>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GameForm;","\r\nimport React, {useEffect} from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { Spinner } from 'react-bootstrap';\r\nimport GameForm from \"../components/GameForm/GameForm\";\r\nimport { getPlanets, getVehicles } from \"../store/actions\";\r\nimport { VALID_PLANET_OPTIONS, SELECTED_PLANETS, SELECTED_VEHICLES } from \"../store/types\";\r\n\r\n\r\n\r\nfunction Game() {\r\n\r\n  const dispatch = useDispatch();\r\n  const planets = useSelector(state => state.getData.planets)\r\n  const loading = useSelector((state) => state.getData.loading)\r\n  \r\n  useEffect(()=>{\r\n    dispatch(getPlanets());\r\n    dispatch(getVehicles());\r\n  }, [])\r\n\r\n  useEffect(()=>{\r\n    dispatch({ type: VALID_PLANET_OPTIONS, payload: Object.keys(planets) })\r\n    dispatch({ type: SELECTED_PLANETS, payload: {} })\r\n    dispatch({ type: SELECTED_VEHICLES, payload: {} })\r\n  },[planets])\r\n\r\n  return (\r\n    <>\r\n    {\r\n      loading ? \r\n      <Spinner style={{margin: \"auto\", display: \"block\"}} animation=\"border\" /> :\r\n      <GameForm/>\r\n    }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;","import { Button, Card, Spinner } from 'react-bootstrap';\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getSelected, getTotalTime } from \"../store/results\";\r\nimport { CLEAR } from \"../store/types\";\r\n\r\nfunction Result() {\r\n\r\n  const dispatch = useDispatch();\r\n  const hiddenPlanet = useSelector(state => state.getData.hiddenPlanet)\r\n  const selected = useSelector(getSelected);\r\n  const timeTaken = useSelector(getTotalTime);\r\n  const history = useHistory();\r\n  const loading = useSelector((state) => state.getData.loading)\r\n  const GetHeader = ()=>{\r\n    if(!selected) \r\n      return \"Hmm, you havent explored the maximum number of planets\";\r\n    else if(hiddenPlanet.status === \"success\") \r\n      return \"Success! Congratulations on Finding Falcone, King Shan is mighty pleased.\"\r\n    else\r\n      return \"Failed! Couldn't find Falcone, sad.\";\r\n  }\r\n\r\n  return (\r\n    \r\n    <Card className=\"text-center\">\r\n      {loading ? \r\n      <Spinner style={{margin: \"auto\", display: \"block\"}} animation=\"border\" /> :\r\n      <>\r\n      <Card.Header \r\n        as=\"h5\"\r\n      >\r\n        {GetHeader()}\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Card.Title hidden={hiddenPlanet.status !== \"success\"}>Time taken: {timeTaken}</Card.Title>\r\n        <Card.Text hidden={hiddenPlanet.status !== \"success\"}>\r\n          Planet found: {hiddenPlanet.planet_name}\r\n        </Card.Text>\r\n        <Button \r\n          variant=\"primary\"  \r\n          onClick={event=>{\r\n            dispatch({type: CLEAR});\r\n            history.push(\"/\");\r\n          }}\r\n        >\r\n          Start {selected ? \"Again\" : \"Playing\"}\r\n        </Button>\r\n      </Card.Body>\r\n      </>\r\n      }\r\n    </Card>\r\n    \r\n  );\r\n}\r\n\r\nexport default Result;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\n\r\n\r\nfunction Footer() {\r\n\r\n  return (\r\n    <footer>\r\n      <h1>Good Luck With Your Search</h1>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport { useSelector } from \"react-redux\"\nimport NoMatch from \"./pages/NoMatch\";\nimport Game from \"./pages/Game\";\nimport Result from \"./pages/Result\";\nimport Footer from \"./components/Footer/Footer\";\n\n\n\nfunction App() {\n\n  const error = useSelector((state) => state.getData.error)\n\n  return (\n    <Router>\n      <NavBar />\n      {error && <h3 style={{color: 'red', textAlign: 'center'}}>{error}</h3>}\n      <Switch>\n        <Route exact path=\"/\" component={Game} />\n        <Route exact path=\"/Result\" component={Result} />\n        <Route component={NoMatch} />\n      </Switch>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { LOADING, ERROR, GET_PLANETS, GET_VEHICLES, FIND_PLANET } from \"../types\";\r\n\r\nexport const initialState = {\r\n  planets: {},\r\n  vehicles: {},\r\n  hiddenPlanet: {\r\n    status: null,\r\n    planet_name: null\r\n  },\r\n  loading: false,\r\n  error: null,\r\n}\r\n\r\n const getData = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return { ...state, loading: action.payload }\r\n    case ERROR:\r\n      return { ...state, error: action.payload }\r\n    case GET_PLANETS:\r\n      return { ...state, planets: action.payload }\r\n    case GET_VEHICLES:\r\n      return { ...state, vehicles: action.payload }\r\n    case FIND_PLANET:\r\n      return { ...state, hiddenPlanet: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default getData;","import { SELECTED_PLANETS, SELECTED_VEHICLES, VALID_PLANET_OPTIONS, CLEAR } from \"../types\";\r\n\r\nexport const initialState = {\r\n  selectedPlanets: {},\r\n  selectedVehicles: {},\r\n  validPlanetOptions: [],\r\n}\r\n\r\n const formControl = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SELECTED_PLANETS:\r\n      return { ...state, selectedPlanets: {...state.selectedPlanets, ...action.payload} }\r\n    case SELECTED_VEHICLES:\r\n      return { ...state, selectedVehicles: {...state.selectedVehicles, ...action.payload} }\r\n    case VALID_PLANET_OPTIONS:\r\n      return { ...state, validPlanetOptions: action.payload }\r\n    case CLEAR:\r\n      return { \r\n        ...state, \r\n        selectedPlanets: {},\r\n        selectedVehicles: {}, \r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default formControl;","import { combineReducers } from \"redux\";\r\nimport getData from \"./getData\";\r\nimport formControl from \"./formControl\";\r\n\r\nconst combineReducer = combineReducers({\r\n  getData,\r\n  formControl,\r\n})\r\n\r\nexport default combineReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from \"redux\"\nimport reduxThunk from \"redux-thunk\"\nimport logger from \"redux-logger\"\nimport { Provider } from \"react-redux\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport rootReducer from \"./store/reducers\";\n\n\nconst store = () =>\n  createStore(rootReducer, {}, applyMiddleware(reduxThunk, logger));\n\nReactDOM.render(\n  <Provider store={store()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}